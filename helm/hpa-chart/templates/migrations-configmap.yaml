{{- if .Values.backend.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "hpa-chart.fullname" . }}-migrations
  labels:
    {{- include "hpa-chart.labels" . | nindent 4 }}
    app.kubernetes.io/component: migrations
data:
  0001_initial_schema.sql: |
    -- Create extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";

    -- Create enum types
    CREATE TYPE user_role AS ENUM ('owner', 'admin', 'editor', 'viewer', 'user');
    CREATE TYPE audit_action AS ENUM (
        'user_login',
        'user_logout',
        'user_created',
        'user_updated',
        'user_deleted',
        'password_changed',
        'password_reset_requested',
        'password_reset_completed',
        'email_verified',
        'role_changed',
        'tenant_created',
        'tenant_updated',
        'tenant_deleted',
        'member_added',
        'member_removed',
        'member_role_changed',
        'api_key_created',
        'api_key_revoked',
        'settings_updated',
        'security_event'
    );

    -- Create tenants table
    CREATE TABLE IF NOT EXISTS tenants (
        id VARCHAR(50) PRIMARY KEY,
        name VARCHAR(255) NOT NULL UNIQUE,
        display_name VARCHAR(255),
        description TEXT,
        settings JSONB DEFAULT '{}',
        metadata JSONB DEFAULT '{}',
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        deleted_at TIMESTAMP WITH TIME ZONE
    );

    -- Create users table
    CREATE TABLE IF NOT EXISTS users (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        email VARCHAR(255) NOT NULL UNIQUE,
        name VARCHAR(255) NOT NULL,
        password_hash VARCHAR(255) NOT NULL,
        email_verified BOOLEAN DEFAULT false,
        email_verification_token VARCHAR(255),
        email_verification_sent_at TIMESTAMP WITH TIME ZONE,
        password_reset_token VARCHAR(255),
        password_reset_sent_at TIMESTAMP WITH TIME ZONE,
        last_login_at TIMESTAMP WITH TIME ZONE,
        last_login_ip INET,
        failed_login_count INTEGER DEFAULT 0,
        failed_login_last_at TIMESTAMP WITH TIME ZONE,
        lockout_until TIMESTAMP WITH TIME ZONE,
        two_factor_enabled BOOLEAN DEFAULT false,
        two_factor_secret VARCHAR(255),
        two_factor_recovery_codes TEXT[],
        preferences JSONB DEFAULT '{}',
        metadata JSONB DEFAULT '{}',
        is_active BOOLEAN DEFAULT true,
        is_system_admin BOOLEAN DEFAULT false,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        deleted_at TIMESTAMP WITH TIME ZONE,
        tenant_id VARCHAR(50) REFERENCES tenants(id) ON DELETE SET NULL
    );

    -- Create tenant_memberships table
    CREATE TABLE IF NOT EXISTS tenant_memberships (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        tenant_id VARCHAR(50) NOT NULL REFERENCES tenants(id) ON DELETE CASCADE,
        role user_role NOT NULL DEFAULT 'user',
        permissions JSONB DEFAULT '{}',
        joined_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        last_access_at TIMESTAMP WITH TIME ZONE,
        invited_by UUID REFERENCES users(id),
        invitation_token VARCHAR(255),
        invitation_sent_at TIMESTAMP WITH TIME ZONE,
        invitation_accepted_at TIMESTAMP WITH TIME ZONE,
        is_primary BOOLEAN DEFAULT false,
        metadata JSONB DEFAULT '{}',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(user_id, tenant_id)
    );

    -- Create sessions table
    CREATE TABLE IF NOT EXISTS sessions (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        tenant_id VARCHAR(50) REFERENCES tenants(id) ON DELETE CASCADE,
        token_hash VARCHAR(255) NOT NULL UNIQUE,
        refresh_token_hash VARCHAR(255) UNIQUE,
        ip_address INET,
        user_agent TEXT,
        device_info JSONB DEFAULT '{}',
        expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
        refresh_expires_at TIMESTAMP WITH TIME ZONE,
        revoked_at TIMESTAMP WITH TIME ZONE,
        revoked_reason TEXT,
        last_activity_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    -- Create api_keys table
    CREATE TABLE IF NOT EXISTS api_keys (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        name VARCHAR(255) NOT NULL,
        key_hash VARCHAR(255) NOT NULL UNIQUE,
        key_prefix VARCHAR(20) NOT NULL,
        user_id UUID REFERENCES users(id) ON DELETE CASCADE,
        tenant_id VARCHAR(50) REFERENCES tenants(id) ON DELETE CASCADE,
        permissions JSONB DEFAULT '{}',
        rate_limit INTEGER,
        expires_at TIMESTAMP WITH TIME ZONE,
        last_used_at TIMESTAMP WITH TIME ZONE,
        last_used_ip INET,
        usage_count INTEGER DEFAULT 0,
        revoked_at TIMESTAMP WITH TIME ZONE,
        revoked_by UUID REFERENCES users(id),
        revoked_reason TEXT,
        metadata JSONB DEFAULT '{}',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    -- Create audit_logs table
    CREATE TABLE IF NOT EXISTS audit_logs (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        tenant_id VARCHAR(50) REFERENCES tenants(id) ON DELETE SET NULL,
        user_id UUID REFERENCES users(id) ON DELETE SET NULL,
        action audit_action NOT NULL,
        resource_type VARCHAR(100),
        resource_id VARCHAR(255),
        details JSONB DEFAULT '{}',
        ip_address INET,
        user_agent TEXT,
        session_id UUID REFERENCES sessions(id) ON DELETE SET NULL,
        status VARCHAR(50),
        error_message TEXT,
        metadata JSONB DEFAULT '{}',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    -- Create permissions table
    CREATE TABLE IF NOT EXISTS permissions (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        name VARCHAR(100) NOT NULL UNIQUE,
        resource VARCHAR(100) NOT NULL,
        action VARCHAR(50) NOT NULL,
        description TEXT,
        conditions JSONB DEFAULT '{}',
        metadata JSONB DEFAULT '{}',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(resource, action)
    );

    -- Create role_permissions table
    CREATE TABLE IF NOT EXISTS role_permissions (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        role user_role NOT NULL,
        permission_id UUID NOT NULL REFERENCES permissions(id) ON DELETE CASCADE,
        tenant_id VARCHAR(50) REFERENCES tenants(id) ON DELETE CASCADE,
        conditions JSONB DEFAULT '{}',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(role, permission_id, tenant_id)
    );

    -- Create settings table
    CREATE TABLE IF NOT EXISTS settings (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        tenant_id VARCHAR(50) REFERENCES tenants(id) ON DELETE CASCADE,
        category VARCHAR(100) NOT NULL,
        key VARCHAR(255) NOT NULL,
        value JSONB NOT NULL,
        description TEXT,
        is_encrypted BOOLEAN DEFAULT false,
        is_public BOOLEAN DEFAULT false,
        metadata JSONB DEFAULT '{}',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_by UUID REFERENCES users(id),
        UNIQUE(tenant_id, category, key)
    );

    -- Create indexes for better performance
    CREATE INDEX idx_users_email ON users(email) WHERE deleted_at IS NULL;
    CREATE INDEX idx_users_tenant_id ON users(tenant_id) WHERE deleted_at IS NULL;
    CREATE INDEX idx_users_is_active ON users(is_active) WHERE deleted_at IS NULL;
    CREATE INDEX idx_users_created_at ON users(created_at DESC);

    CREATE INDEX idx_tenants_name ON tenants(name) WHERE deleted_at IS NULL;
    CREATE INDEX idx_tenants_is_active ON tenants(is_active) WHERE deleted_at IS NULL;

    CREATE INDEX idx_tenant_memberships_user_id ON tenant_memberships(user_id);
    CREATE INDEX idx_tenant_memberships_tenant_id ON tenant_memberships(tenant_id);
    CREATE INDEX idx_tenant_memberships_role ON tenant_memberships(role);

    CREATE INDEX idx_sessions_user_id ON sessions(user_id);
    CREATE INDEX idx_sessions_tenant_id ON sessions(tenant_id);
    CREATE INDEX idx_sessions_token_hash ON sessions(token_hash);
    CREATE INDEX idx_sessions_expires_at ON sessions(expires_at) WHERE revoked_at IS NULL;

    CREATE INDEX idx_api_keys_user_id ON api_keys(user_id) WHERE revoked_at IS NULL;
    CREATE INDEX idx_api_keys_tenant_id ON api_keys(tenant_id) WHERE revoked_at IS NULL;
    CREATE INDEX idx_api_keys_key_hash ON api_keys(key_hash) WHERE revoked_at IS NULL;
    CREATE INDEX idx_api_keys_expires_at ON api_keys(expires_at) WHERE revoked_at IS NULL;

    CREATE INDEX idx_audit_logs_tenant_id ON audit_logs(tenant_id);
    CREATE INDEX idx_audit_logs_user_id ON audit_logs(user_id);
    CREATE INDEX idx_audit_logs_action ON audit_logs(action);
    CREATE INDEX idx_audit_logs_created_at ON audit_logs(created_at DESC);
    CREATE INDEX idx_audit_logs_resource ON audit_logs(resource_type, resource_id);

    CREATE INDEX idx_settings_tenant_id ON settings(tenant_id);
    CREATE INDEX idx_settings_category_key ON settings(category, key);

    -- Create update trigger for updated_at
    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = CURRENT_TIMESTAMP;
        RETURN NEW;
    END;
    $$ language 'plpgsql';

    -- Apply update trigger to tables
    CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

    CREATE TRIGGER update_tenants_updated_at BEFORE UPDATE ON tenants
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

    CREATE TRIGGER update_tenant_memberships_updated_at BEFORE UPDATE ON tenant_memberships
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

    CREATE TRIGGER update_api_keys_updated_at BEFORE UPDATE ON api_keys
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

    CREATE TRIGGER update_permissions_updated_at BEFORE UPDATE ON permissions
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

    CREATE TRIGGER update_settings_updated_at BEFORE UPDATE ON settings
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

  0002_seed_data.sql: |
    -- Seed default tenant
    INSERT INTO tenants (id, name, display_name, description, settings, is_active)
    VALUES 
        ('default', 'default', 'Default Tenant', 'Default tenant for initial setup', '{"features": ["basic"]}', true)
    ON CONFLICT (id) DO NOTHING;

    -- Seed default permissions
    INSERT INTO permissions (name, resource, action, description) VALUES
        ('users.create', 'users', 'create', 'Create new users'),
        ('users.read', 'users', 'read', 'View user details'),
        ('users.update', 'users', 'update', 'Update user information'),
        ('users.delete', 'users', 'delete', 'Delete users'),
        ('users.list', 'users', 'list', 'List all users'),
        ('tenants.create', 'tenants', 'create', 'Create new tenants'),
        ('tenants.read', 'tenants', 'read', 'View tenant details'),
        ('tenants.update', 'tenants', 'update', 'Update tenant information'),
        ('tenants.delete', 'tenants', 'delete', 'Delete tenants'),
        ('tenants.list', 'tenants', 'list', 'List all tenants'),
        ('members.invite', 'members', 'invite', 'Invite new members'),
        ('members.remove', 'members', 'remove', 'Remove members'),
        ('members.update_role', 'members', 'update_role', 'Update member roles'),
        ('settings.read', 'settings', 'read', 'View settings'),
        ('settings.update', 'settings', 'update', 'Update settings'),
        ('audit.read', 'audit', 'read', 'View audit logs'),
        ('api_keys.create', 'api_keys', 'create', 'Create API keys'),
        ('api_keys.revoke', 'api_keys', 'revoke', 'Revoke API keys'),
        ('api_keys.list', 'api_keys', 'list', 'List API keys')
    ON CONFLICT (name) DO NOTHING;
{{- end }}