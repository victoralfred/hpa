name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ created ]

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '20'
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_BACKEND: ${{ github.repository }}/backend
  DOCKER_IMAGE_FRONTEND: ${{ github.repository }}/frontend

jobs:
  # Backend Testing and Building
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: ${{ secrets.TEST_POSTGRES_USER || 'test_user' }}
          POSTGRES_PASSWORD: ${{ secrets.TEST_POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.TEST_POSTGRES_DB || 'test_db' }}
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: backend/go.sum

    - name: Install dependencies
      working-directory: ./backend
      run: |
        go mod download
        go install github.com/golang/mock/mockgen@latest
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

    - name: Run migrations
      working-directory: ./backend
      env:
        DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
      run: |
        for migration in migrations/*.sql; do
          psql "$DATABASE_URL" -f "$migration"
        done

    - name: Generate mocks
      working-directory: ./backend
      run: |
        make mocks || {
          echo "Warning: Mock generation failed. This may be acceptable if mocks are pre-generated."
          # Check if essential mocks exist
          if [ ! -d "mocks" ] || [ -z "$(ls -A mocks)" ]; then
            echo "Error: No mocks found and generation failed"
            exit 1
          fi
        }

    - name: Run linters
      working-directory: ./backend
      run: |
        golangci-lint run --timeout=5m ./...
        go fmt ./...
        go vet ./...

    - name: Run unit tests
      working-directory: ./backend
      env:
        DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
        REDIS_URL: redis://localhost:6379
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Run integration tests
      working-directory: ./backend
      env:
        DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
        REDIS_URL: redis://localhost:6379
      run: |
        go test -v -tags=integration ./tests/integration/...

    - name: Run performance tests
      working-directory: ./backend
      env:
        DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
        REDIS_URL: redis://localhost:6379
      run: |
        go test -v -bench=. -benchmem -tags=performance ./tests/performance/... || {
          echo "Warning: Performance tests failed but not blocking deployment"
          exit 0  # Performance tests are optional
        }

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.out
        flags: backend
        name: backend-coverage

    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: backend-test-results
        path: |
          backend/coverage.html
          backend/coverage.out

  # Frontend Testing and Building
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run linters
      working-directory: ./frontend
      run: |
        npm run lint
        npm run type-check

    - name: Run unit tests
      working-directory: ./frontend
      run: |
        npm run test:unit -- --coverage

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Run E2E tests
      working-directory: ./frontend
      run: |
        npm run test:e2e || {
          echo "Warning: E2E tests failed. This may be due to environment setup issues."
          # E2E tests can be flaky in CI, so we make them non-blocking but log the failure
          exit 0
        }

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./frontend/coverage
        flags: frontend
        name: frontend-coverage

    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run gosec security scanner
      uses: securego/gosec@master
      with:
        args: '-no-fail -fmt sarif -out gosec-results.sarif ./backend/...'

    - name: Upload gosec results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'gosec-results.sarif'

    - name: Dependency check
      working-directory: ./backend
      run: |
        go list -json -m all | nancy sleuth || {
          echo "Warning: Dependency vulnerability check failed or found issues"
          # Log but don't block on vulnerability scanning
          exit 0
        }

  # Build Docker Images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_BACKEND }}
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_BACKEND }}:latest
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_BACKEND }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./helm/Dockerfile.frontend
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_FRONTEND }}:latest
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_FRONTEND }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Helm Chart Validation
  helm-validation:
    name: Helm Chart Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'

    - name: Lint Helm chart
      run: |
        helm lint ./helm/hpa-chart

    - name: Template Helm chart
      run: |
        helm template hpa ./helm/hpa-chart --values ./helm/values.yaml

    - name: Validate Kubernetes manifests
      uses: instrumenta/kubeval-action@master
      with:
        files: './helm/hpa-chart/templates'

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-docker, helm-validation]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'

    - name: Configure Kubernetes context
      run: |
        echo "${{ secrets.KUBECONFIG_DEV }}" | base64 -d > kubeconfig
        export KUBECONFIG=$(pwd)/kubeconfig

    - name: Deploy to development
      run: |
        helm upgrade --install hpa-dev ./helm/hpa-chart \
          --namespace hpa-dev \
          --create-namespace \
          --values ./helm/values.yaml \
          --set global.environment=development \
          --set backend.image.tag=${{ github.sha }} \
          --set frontend.image.tag=${{ github.sha }} \
          --wait \
          --timeout 10m

    - name: Run smoke tests
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=hpa-chart -n hpa-dev --timeout=300s
        # Add actual smoke test commands here

  # Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker, helm-validation]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'

    - name: Configure Kubernetes context
      run: |
        echo "${{ secrets.KUBECONFIG_PROD }}" | base64 -d > kubeconfig
        export KUBECONFIG=$(pwd)/kubeconfig

    - name: Deploy to production
      run: |
        helm upgrade --install hpa ./helm/hpa-chart \
          --namespace hpa \
          --create-namespace \
          --values ./helm/values-production.yaml \
          --set backend.image.tag=${{ github.sha }} \
          --set frontend.image.tag=${{ github.sha }} \
          --wait \
          --timeout 10m

    - name: Run health checks
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=hpa-chart -n hpa --timeout=300s
        # Add health check commands

    - name: Create deployment notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'Production deployment completed for version ${{ github.sha }}'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [deploy-prod]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Release Notes
      id: release_notes
      run: |
        echo "## What's Changed" > release_notes.md
        git log --pretty=format:"* %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release_notes.md
        echo "" >> release_notes.md
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 HEAD^)...${{ github.ref_name }}" >> release_notes.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release_notes.md
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}